trigger:
- 'main'
stages:
- stage: Build
  displayName: Build the web application
  jobs:
  - job: Build
    displayName: Build job
    pool:
      vmImage: ubuntu-18.04
      demands:
      - npm
    variables:
      buildConfiguration: Release
      wwwrootDir: Tailspin.SpaceGame.Web/wwwroot
      dotnetSdkVersion: 3.1.300
    steps:
    - task: UseDotNet@2
      displayName: Use .NET Core SDK $(dotnetSdkVersion)
      inputs:
        version: $(dotnetSdkVersion)
    - task: Npm@1
      displayName: Run npm install
      inputs:
        verbose: false
    - script: ./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)
      displayName: Compile Sass assets
    - task: gulp@1
      displayName: Run gulp tasks
    - script: echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
      displayName: Write build info
      workingDirectory: $(wwwrootDir)
    - task: DotNetCoreCLI@2
      displayName: Restore project dependencies
      inputs:
        command: restore
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Build the project - $(buildConfiguration)
      inputs:
        command: build
        arguments: --no-restore --configuration $(buildConfiguration)
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Publish the project - $(buildConfiguration)
      inputs:
        command: publish
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: --no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()
- stage: 'Test'
  displayName: practice test
  dependsOn: Build
  jobs:
    - deployment: Deploy
      pool:
        vmImage: ubuntu-18.04
      variables:
      - group: Deploy
        env: dev
        count: 001
    steps:
    - task: AzureWebApp@1
      displayName: 'Azure App Service Deploy: website'
      inputs:
        azureSubscription: bba12a48-76de-4498-b0bf-77e7ce1d2b58
        appName: $(WebAppName)
        package: $(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip
    - task: DownloadBuildArtifacts@0
      displayName: "Download Build Artifact"
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: "Deploy to Azure APIapp"
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Microsoft Azure Sponsorship New'
        appType: 'apiApp'
        WebAppName: 'todotapim'
        packageForLinux: '$(System.ArtifactsDirectory)/drop/*.zip'
    - task: stephane-eyskens.apim.apim.apim@3
        displayName: "apim-dev-001"
        inputs:
          ConnectedServiceNameARM: 'Microsoft Azure Sponsorship New'
          ResourceGroupName: $(ResourceGroupName)
          ApiPortalName: $(ApiPortalName)
          UseProductCreatedByPreviousTask: false
          product1: $(product)
          OpenAPISpec: v3
          swaggerlocation: '$(Swagger)'
          targetapi: '$(targetapi)'
          pathapi: '$(pathapi)'
          DisplayName: '$(Output_Title)'
          TemplateSelector: Custom
          Custom: |
            <policies>
                <inbound>
                    <base />
                    <rate-limit calls=$(rate-limit-calls) renewal-period=$(renewal-period) />
                </inbound>
                <backend>
                    <base />
                </backend>
                <outbound>
                    <base />
                </outbound>
                <on-error>
                    <base />
                </on-error>
            </policies>
          MicrosoftApiManagementAPIVersion: '2021-05-07'
    - task: Docker@2
      displayName: 'Build and push the web image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: KubernetesManifest@0
      displayName: aks-dev-001
      inputs:
        action: createSecret
        secretName: $(imagePullSecret)
        dockerRegistryEndpoint: 'Container Registry Connection'
        kubernetesServiceConnection: 'Kubernetes Cluster Connection'
        namespace: $(k8sNamespace)